1. What is cdn?
   A content delivery network (CDN) is a network of interconnected servers that speeds up webpage loading for data-heavy applications.

2. What is crossorigin?
   CORS stands for Cross-Origin Resource Sharing, and is a mechanism that allows resources on a web page to be requested from another domain outside their own domain

3. What is React?
   react is a JS library for building user interface(frontend)
   Library is a pre-written code snippets

4. What is React Element
   It is a object that makes HTML element(Browser Understandable)
   ReactElement(object==>HTML(Browser understandable))

5. {} is a place where you can give attribute to the class

==========================================================================

6. package.json is a configuration for npm
   It is also called dependencies.

7. 2 types of Dependencies:

   1. Dev --> required duing developing phase
   2. Normal --> used in production

8. npm install -D parcel
   here, D means npm is installing this package as Dev dependency

==========================================================================

# React.createElement => ReactElementt => JS-Object => HTMLElement(render)

const heading = React.createElement("h2", { id: "blue" }, "namaste react");

# JSX (transpiled before it reaches the JS) - PARCEL -BABEL

# Babel (JS-Complier/ Transpiler) converts JSX into React element

# JSX => React.createElement => ReactElementt => JS-Object => HTMLElement(render)

const jsxheading = <h1 id="heading">namaste react using JSX</h1>;

==========================================================================

React Uses ===> Reconcilition Algorithm ( React Fibre ) (Introduced in React 16)

(React Fibre) React uses Diff Algorithm to find out the old virtual DOM and new virtual DOM, and update the actual DOM.

Why React is fast?
React is fast beacuse it is doing efficient DOM manipulation by the help of virtual DOM and using diff algorithm that comes with React Reconcilition Algorithm/ React Fibre.

Monolith
Microservice Architecture

# Class Based Component

- How the react class component renders
  (following methods are called in order)

  - constructor
  - render
  - componentDidMount

- componentDidMount is used to call an API call

- Multiple child components in a parent then this is how the mounting works in react

  - Parent Constructor
  - Parent Render

    - Child - 1 - Constrctor
    - Child - 1 - Render

    - Child - 2 - Constrctor
    - Child - 2 - Render

   <DOM updated in a single Batch>

  - Child - 1 - componentDidMount
  - Child - 1 - componentDidMount

  - Parent componentDidMount

# Why Child 1 componentDidMount not called after its render completion?

- React optimises the render when multiple child components are present.
- This is how react makes the application fast.
- DOM is updated in a single batch rather than multiple batched in commit phase.

# 2 phases

1.  Render Phase -> constructor and render
2.  Commit Phase -> Actual DOM updates, and component did mount

# Mounting, Updating then Unmounting

# ---- MOUNTING -----

- Constructor
- Render
     <HTML Dummy>
- component Did Mount - <API Call> - <this.setState()>

# ----- UPDATING ------

- Render
  - render(API data)
  - <HTML (new API Data)>
- component Did Update

# ------- Unmounting -------

- When the component is removed from the webpage/UI/not visible to user/path is changed then, current component will unmount

# Types of Testing (developer)

- Unit Testing
- Integration Testing
- End to End Testing (e2e testing)

# Setting up testing in our app

1. Install React-Testing-Library (npm i -D @testing-library/react)
2. Install Jest (npm i -D jest)
3. Install Babel and its dependencies (Babel docs) (npm i -D babel-jest @babel/core @babel/preset-env)
4. Configure babel (babel.config.js)
5. Configure Pafcel Config file (.parcelrc) to disable default babel transpilation, so we can use babel.config.js configuration (Parcel docs)
6. Jest Configuration (npx jest --init) -> Creates jest configuration file (jest.config.js)
7. Install jsdom library (npm i -D jest-environment-jsdom)
8. Install @babel/preset-react to make jsx work in test cases => (npm i -D @babel/preset-react),
9. Include @babel/preset-react in babel.config.js file ==> ["@babel/preset-react", { runtime:"automatic" }],
10. Install @testing-library/jest-dom
11. For Intellisense install @types/jest ==> npm i -D @types/jest

12. **test** (test folder)
13. Test files Examples
    - Headers.test.js
    - Headers.test.ts
    - Headers.spec.js
    - Headers.spec.ts
14. test() / it() function for testing => both are same
15. describe() function to group the test() cases

# Continuous watch test without stopping (just like nodemon)

- Add this script to package.json file : ===> "watch-test": "jest --watch"
